Description:
A planner for Minecraft that makes use of Goal Oriented Action Programming (GOAP) to determine the actions needed to construct a desired object from some initial set of items in the inventory, denoted at the top of the crafting.json file. This is done by constructing a tree of necessary materials/actions to obtain an item.

How to use:
Note: This was programmed using Python 3.0. This program may not work using Python 2.0.
Set the initial objects in the player inventory by editing the "Initial" parameter in crafting.json, as well as the desired objects in "Goal". Then run in the command line using "python craft_planner.py". The file crafting.json is automatically read within the script whilst they are in the same directory. If the goal objects can be crafted within 30 time steps (denoted within the recipes in crafting.json) then the steps needed will be printed out in order at the end of the script's execution. Otherwise, no actions will be printed, due to requiring too much time. Note that this process will take a few seconds to complete. This time constraint may be modified on line 293 by changing the 4th parameter of search() from it's default of 30.

How it works:
GOAP is a method of tree search that works off the idea of working backwards from a desired goal. In this case, the JSON holds a list of initial items, and some desired object(s). Given a list of items that exist, and a list of recipes that include required items, a produced item(s), consumed items, and required time, a tree can be built from the desired goal, down until it finds an initial state that meets our starting conditions.

Tree Pruning:
Because the list of possible 'states' is very VERY large, we have to prune the tree in order to lower traversal time. Because several actions that lead to the same result can be produced (i.e. to get 2 benches, we can mine for wood twice, then make the benches, or alternate mining and crafting a bench), we can prune these out of the tree. We may also prune out recipes that use lower quality tools since they take up more time, which is undesireable. See the graph() function on line 97 of craft_planner.py for a full list of pruning rules.
